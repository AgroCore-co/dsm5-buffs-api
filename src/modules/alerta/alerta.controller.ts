import { Controller, Get, Post, Body, Patch, Param, Delete, Query, UseGuards, ParseIntPipe, ParseBoolPipe, HttpCode, UseInterceptors } from '@nestjs/common';
import { CacheInterceptor, CacheTTL } from '@nestjs/cache-manager';
import { AlertasService } from './alerta.service';
import { CreateAlertaDto, PrioridadeAlerta, NichoAlerta } from './dto/create-alerta.dto';
import { SupabaseAuthGuard } from '../auth/guards/auth.guard';
import { ApiBearerAuth, ApiOperation, ApiQuery, ApiResponse, ApiTags, ApiParam } from '@nestjs/swagger';

@ApiBearerAuth('JWT-auth')
@UseGuards(SupabaseAuthGuard)
@ApiTags('Alertas')
@Controller('alertas')
export class AlertasController {
  constructor(private readonly alertasService: AlertasService) {}

  // Este endpoint seria mais para testes ou cria√ß√£o manual,
  // j√° que a maioria dos alertas ser√° criada pelos servi√ßos.
  @Post()
  @ApiOperation({ 
    summary: 'Cria um novo alerta com classifica√ß√£o autom√°tica de prioridade',
    description: `
      Cria um alerta que pode ser classificado automaticamente usando IA (Gemini).
      
      **Funcionalidades:**
      - ü§ñ **Classifica√ß√£o autom√°tica de prioridade**: Se fornecido texto de ocorr√™ncia cl√≠nica, a IA analisar√° e definir√° a prioridade (BAIXA, MEDIA, ALTA)
      - üìã **Cria√ß√£o manual**: Tamb√©m permite cria√ß√£o manual com prioridade pr√©-definida
      
      **Classifica√ß√£o IA - Crit√©rios:**
      - **ALTA**: Risco de vida, alto cont√°gio, sintomas graves (ex: animal ca√≠do, febre alta, mastite gangrenosa)
      - **M√âDIA**: Requer aten√ß√£o r√°pida, pode evoluir (ex: √∫bere inchado, diarreia persistente, manqueira)
      - **BAIXA**: Problemas localizados, observa√ß√µes de rotina (ex: pequenos arranh√µes, poucos parasitas)
    `
  })
  @ApiResponse({ 
    status: 201, 
    description: 'Alerta criado com sucesso. Prioridade pode ter sido classificada automaticamente pela IA.' 
  })
  @ApiResponse({ 
    status: 400, 
    description: 'Dados inv√°lidos fornecidos.' 
  })
  create(@Body() createAlertaDto: CreateAlertaDto) {
    return this.alertasService.create(createAlertaDto);
  }

  @Get()
  @UseInterceptors(CacheInterceptor)
  @CacheTTL(30)
  @ApiOperation({ 
    summary: 'Lista alertas com filtros avan√ßados',
    description: `
      Retorna lista de alertas com op√ß√µes de filtro para facilitar o monitoramento do rebanho.
      
      **Tipos de Alerta dispon√≠veis:**
      - CLINICO: Problemas de sa√∫de individual
      - SANITARIO: Quest√µes sanit√°rias do rebanho
      - REPRODUCAO: Alertas reprodutivos
      - MANEJO: Alertas de manejo geral
    `
  })
  @ApiQuery({ 
    name: 'tipo', 
    required: false, 
    description: 'Filtra pelo tipo do alerta (CLINICO, SANITARIO, REPRODUCAO, MANEJO)',
    enum: NichoAlerta
  })
  @ApiQuery({ 
    name: 'prioridade', 
    required: false, 
    description: 'Filtra pela prioridade do alerta (classificada pela IA ou manual)',
    enum: PrioridadeAlerta
  })
  @ApiQuery({ 
    name: 'antecedencia', 
    required: false, 
    description: 'Filtra alertas que ocorrer√£o nos pr√≥ximos X dias',
    type: Number,
    example: 7
  })
  @ApiQuery({ 
    name: 'incluirVistos', 
    required: false, 
    description: 'Se true, inclui alertas j√° visualizados pelo usu√°rio', 
    type: Boolean,
    example: false
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Lista de alertas retornada. Prioridades podem ter sido classificadas pela IA Gemini.' 
  })
  findAll(
    @Query('tipo') tipo?: string,
    @Query('prioridade') prioridade?: PrioridadeAlerta,
    @Query('antecedencia') antecendencia?: number,
    @Query('incluirVistos', new ParseBoolPipe({ optional: true })) incluirVistos?: boolean,
  ) {
    return this.alertasService.findAll(tipo, antecendencia, incluirVistos);
  }

  @Get(':id')
  @UseInterceptors(CacheInterceptor)
  @CacheTTL(30) 
  @ApiOperation({ 
    summary: 'Busca alerta espec√≠fico com detalhes completos',
    description: 'Retorna informa√ß√µes detalhadas de um alerta, incluindo se a prioridade foi classificada por IA.'
  })
  @ApiParam({ name: 'id', description: 'ID √∫nico do alerta', type: Number })
  @ApiResponse({ 
    status: 200, 
    description: 'Alerta encontrado com todos os detalhes.' 
  })
  @ApiResponse({ 
    status: 404, 
    description: 'Alerta n√£o encontrado.' 
  })
  findOne(@Param('id', ParseIntPipe) id: number) {
    return this.alertasService.findOne(id);
  }
  
  @Patch(':id/visto')
  @ApiOperation({ 
    summary: 'Gerencia status de visualiza√ß√£o do alerta',
    description: `
      Marca um alerta como visto ou n√£o visto para controle do usu√°rio.
      
      **Funcionalidade:**
      - Permite rastreamento de quais alertas j√° foram verificados
      - √ötil para filtrar apenas alertas pendentes de aten√ß√£o
      - N√£o afeta a prioridade ou outros dados do alerta
    `
  })
  @ApiParam({ name: 'id', description: 'ID √∫nico do alerta', type: Number })
  @ApiQuery({ 
    name: 'status', 
    type: Boolean, 
    description: 'true = marcar como visto, false = marcar como n√£o visto',
    example: true
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Status de visualiza√ß√£o atualizado com sucesso.'
  })
  @ApiResponse({ 
    status: 404, 
    description: 'Alerta n√£o encontrado.'
  })
  setVisto(
    @Param('id', ParseIntPipe) id: number,
    @Query('status', ParseBoolPipe) status: boolean
  ) {
    return this.alertasService.setVisto(id, status);
  }

  @Delete(':id')
  @HttpCode(204)
  @ApiOperation({ 
    summary: 'Remove alerta do sistema',
    description: 'Deleta permanentemente um alerta. Esta a√ß√£o n√£o pode ser desfeita.'
  })
  @ApiParam({ name: 'id', description: 'ID √∫nico do alerta a ser deletado', type: Number })
  @ApiResponse({ 
    status: 204, 
    description: 'Alerta deletado com sucesso.'
  })
  @ApiResponse({ 
    status: 404, 
    description: 'Alerta n√£o encontrado.'
  })
  remove(@Param('id', ParseIntPipe) id: number) {
    return this.alertasService.remove(id);
  }
}

